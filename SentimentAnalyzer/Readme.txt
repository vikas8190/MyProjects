Sentiment Analyzer
******************************************************************************************

This project is coded using Python version 3.4.2

There are two programs for this project
a) nbtrain.py
b) nbtest.py

In order to successfully run this code ,we need following libraries

1) math
2) operator
3) sys
4) decimal
5) os

All these modules are in-built into python 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

How to run the program
----------------------

a) To run the training module use following command :
   
 python nbtrain.py <train-directory> <model-file name>


for instance if my model file is present in folder textcat/train and the name of model file to be generated is
model_file.txt, then the function call should be as follows


 python nbtrain.py 'textcat/train' 'model_file.txt'


b) To run the test module use the following command :

 python nbtest.py <model-file> <test-directory> <predictions-file>

model-file refers to the output generated by nbtrain.txt
test-directory is the directory where files for evaluation are present
predicitons file refers to the file which consists of prediction results for the files in test-directory

for instance , if the model file is "model-file.txt" and test-directory is "textcat/test" and we want the prediction file to 
be named prediction.txt , then the command to run the test module would be

python nbtest.py 'model-file.txt' 'textcat/test' 'prediction.txt'

again for dev, if the model file is "model-file.txt" and dev-directory-pos reviews are at "textcat/dev/pos" and we want the prediction file to 
be named prediction.txt , then the command to run the test module would be

python nbtest.py 'model-file.txt' 'textcat/dev/pos' 'prediction.txt'

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

DELIVERABLE CONTENTS
------------------

For Unigram:

a) unigram/nbtrain.py : this file has the python code to train the system

b) unigram/nbtest.py : this file has the python code to evaluate the test/dev data

c) unigram/model_unigram.txt : this file consists of the trained data

d) unigram/prediction_test.txt : this file consists of predictions for test data 

e) unigram/prediction_dev_pos.txt : this file consists of predictions for Negative Dev data 

f) unigram/prediction_dev_neg.txt : this file consists of predictions for Positive Dev data 

g) result-analysis.txt : This contains analysis of the predictions for dev/test for all the models(unigram,bigram,unigram with dirichlet) 

h) Highest_ratio_details_with_laplace.txt : Contains terms with highest log pos/neg and neg/pos weight ratio

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


Bigram :

Run Instructions for Bigram
---------------------------------------

a) To run the training module use following command :
   
 python nbtrain_bigram.py <train-directory> <model-file name>


for instance if my model file is present in folder textcat/train and the name of model file to be generated is
model_file.txt, then the function call should be as follows


 python nbtrain_bigram.py 'textcat/train' 'model_file.txt'


b) To run the test module use the following command :

 python nbtest_bigram.py <model-file> <test-directory> <predictions-file>

model-file refers to the output generated by nbtrain.txt
test-directory is the directory where files for evaluation are present
predicitons file refers to the file which consists of prediction results for the files in test-directory

for instance , if the model file is "model-file.txt" and test-directory is "textcat/test" and we want the prediction file to 
be named prediction.txt , then the command to run the test module would be

python nbtest_bigram.py 'model-file.txt' 'textcat/test' 'prediction.txt'

again for dev, if the model file is "model-file.txt" and dev-directory-pos reviews are at "textcat/dev/pos" and we want the prediction file to 
be named prediction.txt , then the command to run the test module would be

python nbtest_bigram.py 'model-file.txt' 'textcat/dev/pos' 'prediction.txt'

DELIVERABLE CONTENTS
--------------------
a) bigram/nbtrain_bigram.py : this file has the python code to train the system

b) bigram/nbtest_bigram.py : this file has the python code to evaluate the test/dev data

c) bigram/model_bigram.txt : this file consists of the trained data

d) bigram/bigram_prediction_test.txt : this file consists of predictions for test data 

e) bigram/bigram_prediction_dev_pos.txt : this file consists of predictions for Negative Dev data 

f) bigram/bigram_prediction_dev_neg.txt : this file consists of predictions for Positive Dev data 


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

For Unigram with dirichlet smoothing:

Run Instructions for Unigram with dirichlet smoothing:
---------------------------------------

a) To run the training module use following command :
   
 python nbtrain_dirichlet.py <train-directory> <model-file name> <smoothing dirichlet parameter value>


for instance if my model file is present in folder textcat/train and the name of model file to be generated is
model_file.txt, then the function call should be as follows


 python nbtrain_dirichlet.py 'textcat/train' 'model_file.txt' 0.35


b) To run the test module use the following command :

 python nbtest_dirichlet.py <model-file> <test-directory> <predictions-file>

model-file refers to the output generated by nbtrain.txt
test-directory is the directory where files for evaluation are present
predicitons file refers to the file which consists of prediction results for the files in test-directory

for instance , if the model file is "model-file.txt" and test-directory is "textcat/test" and we want the prediction file to 
be named prediction.txt , then the command to run the test module would be

python nbtest_dirichlet.py 'model-file.txt' 'textcat/test' 'prediction.txt'

again for dev, if the model file is "model-file.txt" and dev-directory-pos reviews are at "textcat/dev/pos" and we want the prediction file to 
be named prediction.txt , then the command to run the test module would be

python nbtest_dirichlet.py 'model-file.txt' 'textcat/dev/pos' 'prediction.txt'

DELIVERABLE CONTENTS
--------------------
a) dirichlet/nbtrain_dirichlet.py : this file has the python code to train the system

b) dirichlet/nbtest_dirichlet.py : this file has the python code to evaluate the test/dev data

c) dirichlet/model_dirichlet.txt : this file consists of the trained data

d) dirichlet/dirichlet_prediction_test.txt : this file consists of predictions for test data 

e) dirichlet/dirichlet_prediction_dev_pos.txt : this file consists of predictions for Negative Dev data 

f) dirichlet/dirichlet_prediction_dev_neg.txt : this file consists of predictions for Positive Dev data 

NOTE:
--------
To run all these classifier models for simplicity, run the provided shell script as:
./run_classifiers.sh

For this to run, the textcat directory must be present in the same path and the directory structure of the deliverables need to be same as given.

All the output files get rendered in the same directory from where run_classifiers is run.
